;; Object site-lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "site-lisp/"
  :tables (list 
   (semanticdb-table "tidy.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("easymenu" include nil nil [6494 6513]) ("compile" include nil nil [6550 6568]) ("tidy-xemacs-p" function nil nil [6734 6872]) ("tidy-windows-p" function nil nil [6874 7021]) ("defalias" code nil nil [7058 7116]) ("defalias" code nil nil [7117 7173]) ("defalias" code nil nil [7174 7232]) ("defalias" code nil nil [7233 7300]) ("defalias" code nil nil [7301 7355]) ("defalias" code nil nil [7356 7417]) ("defgroup" code nil nil [7441 8938]) ("tidy-config-file" variable (:user-visible-flag t :default-value "~/.tidyrc") nil [8941 9322]) ("options-alist" code nil nil [35696 35730]) ("setq" code nil nil [35777 35810]) ("setq" code nil nil [35815 35932]) ("put" code nil nil [35975 36021]) ("make-variable-buffer-local" code nil nil [36026 36061]) ("set" code nil nil [36066 36082]) ("setq" code nil nil [36098 36138]) ("tidy-shell-command" variable (:user-visible-flag t :default-value "c:/rmay/apps/tidy/tidy.exe") nil [9324 9472]) ("tidy-temp-directory" variable (:default-value ".") nil [9474 9902]) ("tidy-menu-lock" variable (:default-value t) nil [9904 10098]) ("tidy-menu-x-position" variable (:user-visible-flag t :default-value 211) nil [10100 10372]) ("tidy-debug" variable nil nil [10397 10490]) ("tidy-toggle-debug" function (:user-visible-flag t) nil [10535 10675]) ("tidy-options-alist" variable nil nil [10677 10980]) ("when" code nil nil [10982 35516]) ("let" code nil nil [35690 36148]) ("or" code nil nil [36249 36321]) ("or" code nil nil [36331 36412]) ("or" code nil nil [36422 36510]) ("or" code nil nil [36520 36600]) ("progn" code nil nil [36233 36611]) ("tidy-xemacs-p" code nil nil [36707 36722]) ("tidy-menu-position" function nil nil [36737 36897]) ("tidy-menu-lock" function (:arguments ("entry" "state" "path")) nil [36913 37485]) ("tidy-menu-lookup" function (:arguments ("path")) nil [37501 37601]) ("tidy-menu-position" function nil nil [37627 37743]) ("tidy-menu-lock" function (:arguments ("entry" "state" "path")) nil [37778 38374]) ("tidy-menu-lookup" function (:arguments ("dummy")) nil [38393 38478]) ("anonymous" code nil nil [39166 39591]) ("anonymous" code nil nil [39601 40028]) ("value" code nil nil [40394 40409]) ("while" code nil nil [40416 41855]) ("anonymous" code nil nil [42062 42394]) ("set" code nil nil [42399 42456]) ("anonymous" code nil nil [42643 43039]) ("set" code nil nil [43049 43163]) ("vector" code nil nil [43488 43635]) ("vector" code nil nil [43938 44086]) ("null" code nil nil [44159 44179]) ("\"Tidy\"" code nil nil [44223 45381]) ("null" code nil nil [45457 45481]) ("\"Set doctype\"" code nil nil [45531 47481]) ("null" code nil nil [47553 47583]) ("\"Set char-encoding\"" code nil nil [47637 49843]) ("null" code nil nil [49978 49994]) ("anonymous" code nil nil [50014 50517]) ("while" code nil nil [50523 54796]) ("setq" code nil nil [54800 55921]) ("setq" code nil nil [56095 56125]) ("or" code nil nil [56392 56450]) ("or" code nil nil [56460 56518]) ("or" code nil nil [56528 56586]) ("anonymous" code nil nil [56717 56935]) ("when" code nil nil [56965 57623]) ("get-buffer" code nil nil [57756 57785]) ("get-buffer" code nil nil [57808 57837]) ("get-buffer" code nil nil [57854 57875]) ("get-buffer" code nil nil [57898 57919]) ("widen" code nil nil [58093 58100]) ("save-excursion" code nil nil [58105 58182]) ("anonymous" code nil nil [58311 58351]) ("if" code nil nil [58356 61198]) ("if" code nil nil [61398 62510]) ("setq" code nil nil [62709 62744]) ("if" code nil nil [62806 63946]) ("anonymous" code nil nil [64511 65976]) ("if" code nil nil [65982 66032]) ("when" code nil nil [66055 66240]) ("when" code nil nil [66245 66405]) ("tidy-save-settings" code nil nil [66411 66443]) ("shell-command-on-region" code nil nil [66471 66530]) ("setq" code nil nil [66609 66662]) ("if" code nil nil [66714 66771]) ("if" code nil nil [66776 66834]) ("save-excursion" code nil nil [66881 68064]) ("if" code nil nil [68213 68484]) ("unless" code nil nil [68490 68947]) ("if" code nil nil [69000 69408]) ("delete-windows-on" code nil nil [69418 69451]) ("if" code nil nil [69478 69654]))
    :file "tidy.el"
    :pointmax 69720
    :unmatched-syntax 'nil
    )
   (semanticdb-table "mode-compile.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("compile" include nil (dependency-file "c:/rmay/apps/emacs-22.1/lisp/progmodes/compile.el") [12639 12657]) ("byte-compile" include (:directory "bytecomp") nil [12696 12730]) ("backquote" include nil nil [12751 12771]) ("cl" include nil nil [12772 12785]) ("load-library" code nil nil [12786 12810]) ("pp" include nil nil [12833 12846]) ("condition-case" code nil nil [12893 12954]) ("if" code nil nil [12957 13241]) ("condition-case" code nil nil [13310 13369]) ("if" code nil nil [13372 13673]) ("defgroup" code nil nil [13693 13911]) ("defgroup" code nil nil [13912 14028]) ("defgroup" code nil nil [14029 14117]) ("defgroup" code nil nil [14118 14232]) ("mode-compile-modes-alist" variable (:default-value (quote ((c-mode cc-compile kill-compilation) (java-mode java-compile kill-compilation) (c++-mode c++-compile kill-compilation) (ada-mode ada-compile kill-compilation) (fortran-mode f77-compile kill-compilation) (dired-mode dired-compile kill-compilation) (emacs-lisp-mode elisp-compile keyboard-quit) (lisp-interaction-mode elisp-compile keyboard-quit) (makefile-mode makefile-compile kill-compilation) (sh-mode sh-compile kill-compilation) (csh-mode csh-compile kill-compilation) (zsh-mode zsh-compile kill-compilation) (perl-mode perl-compile kill-compilation) (cperl-mode perl-compile kill-compilation) (tcl-mode tcl-compile kill-compilation) (python-mode python-compile kill-compilation) (ruby-mode ruby-compile kill-compilation) (fundamental-mode guess-compile nil) (text-mode guess-compile nil) (indented-text-mode guess-compile nil) (compilation-mode default-compile kill-compilation)))) nil [14316 17756]) ("mode-compile-filename-regexp-alist" variable (:default-value (quote ((mode-compile-makefile-regexp . makefile-mode) ("\\.sh$" . sh-mode) ("\\.csh$" . csh-mode) ("\\.zsh$" . zsh-mode)))) nil [17758 19522]) ("mode-compile-shell-alist" variable (:default-value (quote (("sh" . sh-mode) ("csh" . csh-mode) ("zsh" . zsh-mode) ("perl" . perl-mode) ("tcl" . tcl-mode) ("python" . python-mode) ("ruby" . ruby-mode)))) nil [19524 20803]) ("mode-compile-make-program" variable (:user-visible-flag t :default-value "make") nil [20820 21013]) ("mode-compile-makefile-regexp" variable (:default-value "\\(^[Mm]akefile\\|.*\\.[mM][aA]?[kK][eE]?\\.?.*$\\)") nil [21015 21201]) ("mode-compile-makefile-backups-regexp" variable (:default-value "\\(\\(~\\|\\.[bB][aA][cC]?[kK]\\)$\\)\\|\\(\\(^\\|/\\)[.,][^/]+$\\)") nil [21203 21413]) ("mode-compile-ignore-makefile-backups" variable (:user-visible-flag t :default-value t) nil [21430 21611]) ("mode-compile-default-make-options" variable (:default-value "-k") nil [21628 21714]) ("mode-compile-make-options" variable (:user-visible-flag t :default-value (eval mode-compile-default-make-options)) nil [21730 22393]) ("mode-compile-prefered-default-makerule" variable (:user-visible-flag t :default-value (quote none)) nil [22410 23285]) ("mode-compile-ignore-makerule-regexp" variable (:user-visible-flag t) nil [23302 23721]) ("mode-compile-save-all-p" variable (:user-visible-flag t) nil [23738 23918]) ("mode-compile-always-save-buffer-p" variable (:user-visible-flag t) nil [23935 24119]) ("mode-compile-never-edit-command-p" variable (:user-visible-flag t) nil [24136 24290]) ("defgroup" code nil nil [24334 24445]) ("mode-compile-other-frame-p" variable (:user-visible-flag t) nil [24462 24775]) ("mode-compile-other-frame-name" variable (:default-value "COMPILATION") nil [24777 25043]) ("mode-compile-default-frame-parameters" variable (:constant-flag t :default-value (list (cons (quote name) mode-compile-other-frame-name) (cons (quote width) 85) (cons (quote height) 30))) nil [25045 25267]) ("mode-compile-frame-parameters-alist" variable (:default-value (purecopy mode-compile-default-frame-parameters)) nil [25269 25731]) ("mode-compile-before-compile-hook" variable nil nil [25765 25935]) ("mode-compile-after-compile-hook" variable nil nil [25952 26120]) ("mode-compile-before-kill-hook" variable nil nil [26137 26317]) ("mode-compile-after-kill-hook" variable nil nil [26334 26512]) ("mode-compile-exe-file-ext" variable (:user-visible-flag t :default-value (cond ((memq system-type (quote (ms-dos emx windows-95 windows-98 windows-nt))) ".exe") (t ""))) nil [26545 26731]) ("mode-compile-dir-separator-char" variable (:user-visible-flag t :default-value (cond ((memq system-type (quote (ms-dos emx windows-95 windows-98 windows-nt))) "\\") (t "/"))) nil [26733 26964]) ("mode-compile-choosen-compiler" variable (:user-visible-flag t) nil [27013 27776]) ("mode-compile-expert-p" variable (:user-visible-flag t) nil [27815 28006]) ("mode-compile-reading-time" variable (:user-visible-flag t :default-value 1) nil [28023 28402]) ("defgroup" code nil nil [28440 28528]) ("mode-compile-remote-hosts-alist" variable (:default-value (quote nil)) nil [28530 29227]) ("mode-compile-remote-execute-command" variable (:default-value "rsh") nil [29229 29561]) ("eval-when" code nil nil [29562 30069]) ("mode-compile-remote-execute-set-host-arg" variable nil nil [30071 30287]) ("mode-compile-remote-execute-set-command-arg" variable nil nil [30289 30518]) ("mode-compile-remote-execute-set-username-arg" variable (:default-value "-l") nil [30520 30754]) ("mode-compile-remote-execute-misc-args" variable nil nil [30756 30937]) ("defgroup" code nil nil [30977 31067]) ("cc-compilers-list" variable (:default-value (quote ("gcc" "c89" "acc" "cc"))) nil [31069 31264]) ("cc-companion-file-regexp" variable (:default-value "\\(_[Pp]\\)?\\.[pP]?h") nil [31266 31411]) ("cc-default-compiler" variable (:user-visible-flag t :default-value "cc") nil [31413 31844]) ("cc-compiler-varenv" variable (:default-value "CC") nil [31846 31962]) ("cc-cflags-varenv" variable (:default-value "CFLAGS") nil [31964 32088]) ("cc-source-ext-list" variable (:default-value (quote ("c"))) nil [32090 32221]) ("cc-headers-ext-list" variable (:default-value (quote ("h"))) nil [32223 32351]) ("cc-default-compiler-options" variable (:user-visible-flag t :default-value "-g") nil [32353 32646]) ("cc-source-file-ext-regexp" variable (:default-value "\\.c") nil [32648 32792]) ("cc-build-output-args" variable (:default-value t) nil [32794 32899]) ("cc-object-file-ext" variable (:default-value "o") nil [32901 33036]) ("defgroup" code nil nil [33079 33163]) ("java-compilers-list" variable (:default-value (quote ("javac"))) nil [33165 33356]) ("java-companion-file-regexp" variable nil nil [33358 33575]) ("java-default-compiler" variable (:user-visible-flag t :default-value "javac") nil [33577 33993]) ("java-compiler-varenv" variable (:default-value "JAVAC") nil [33995 34119]) ("java-cflags-varenv" variable (:default-value "JAVAC_FLAGS") nil [34121 34255]) ("java-source-ext-list" variable (:default-value (quote ("java"))) nil [34257 34399]) ("java-headers-ext-list" variable (:default-value (quote ("java"))) nil [34401 34532]) ("java-default-compiler-options" variable (:user-visible-flag t :default-value "-O") nil [34534 34836]) ("java-source-file-ext-regexp" variable (:default-value "\\.java") nil [34838 34993]) ("java-build-output-args" variable nil nil [34995 35115]) ("java-object-file-ext" variable (:default-value "class") nil [35117 35264]) ("defgroup" code nil nil [35306 35387]) ("c++-compilers-list" variable (:default-value (quote ("g++" "gcc" "CC"))) nil [35389 35585]) ("c++-companion-file-regexp" variable (:default-value "\\(_[Pp]\\)?\\.\\([pP]?[Hh][Hh]?\\|[Hh]\\+\\+?\\)") nil [35587 35795]) ("c++-default-compiler" variable (:user-visible-flag t :default-value "CC") nil [35797 36208]) ("c++-compiler-varenv" variable (:default-value "CXX") nil [36210 36332]) ("c++-cflags-varenv" variable (:default-value "CXXFLAGS") nil [36334 36465]) ("c++-source-ext-list" variable (:default-value (quote ("cc" "C" "CC" "cpp" "cxx" "c++" "c+"))) nil [36467 36636]) ("c++-headers-ext-list" variable (:default-value (quote ("H" "hh" "HH" "h++" "h+" "h" "hpp" "hxx"))) nil [36638 36808]) ("c++-default-compiler-options" variable (:user-visible-flag t :default-value "-g") nil [36810 37108]) ("c++-source-file-ext-regexp" variable (:default-value "\\.\\(cc\\|CC?\\|c\\+\\+?\\|cpp\\|cxx\\)") nil [37110 37295]) ("c++-build-output-args" variable (:default-value t) nil [37297 37407]) ("c++-object-file-ext" variable (:default-value "o") nil [37409 37549]) ("defgroup" code nil nil [37591 37672]) ("ada-compilers-list" variable (:default-value (quote ("gcc" "gnat" "ada"))) nil [37674 37874]) ("ada-companion-file-regexp" variable nil nil [37876 38106]) ("ada-default-compiler" variable (:user-visible-flag t :default-value "ada") nil [38108 38519]) ("ada-compiler-varenv" variable (:default-value "ADA") nil [38521 38643]) ("ada-aflags-varenv" variable (:default-value "AFLAGS") nil [38645 38774]) ("ada-source-ext-list" variable (:default-value (quote ("ads" "adb" "ada" "a"))) nil [38776 38930]) ("ada-headers-ext-list" variable (:default-value (quote ("ads" "ada" "a"))) nil [38932 39074]) ("ada-default-compiler-options" variable (:user-visible-flag t :default-value "-g") nil [39076 39375]) ("ada-source-file-ext-regexp" variable (:default-value "\\.\\(ad[abs]\\|a\\)") nil [39377 39616]) ("ada-build-output-args" variable (:default-value t) nil [39618 39728]) ("ada-object-file-ext" variable (:default-value "o") nil [39730 39870]) ("defgroup" code nil nil [39916 40005]) ("f77-compilers-list" variable (:default-value (quote ("f77" "fc"))) nil [40007 40202]) ("f77-companion-file-regexp" variable (:default-value "\\(_[Pp]\\)?\\.[pP]?inc") nil [40204 40360]) ("f77-default-compiler" variable (:user-visible-flag t :default-value "f77") nil [40362 40786]) ("f77-compiler-varenv" variable (:default-value "F77") nil [40788 40918]) ("f77-cflags-varenv" variable (:default-value "FCOPTS") nil [40920 41057]) ("f77-source-ext-list" variable (:default-value (quote ("f" "F" "for" "For"))) nil [41059 41219]) ("f77-headers-ext-list" variable (:default-value (quote ("inc" "h"))) nil [41221 41360]) ("f77-default-compiler-options" variable (:user-visible-flag t :default-value "-w66 -a") nil [41362 41674]) ("f77-source-file-ext-regexp" variable (:default-value "\\.\\([Ff]\\|for\\)") nil [41676 41848]) ("f77-build-output-args" variable (:default-value t) nil [41850 41964]) ("f77-object-file-ext" variable (:default-value "o") nil [41966 42114]) ("defgroup" code nil nil [42155 42259]) ("sh-command" variable (:default-value "sh") nil [42261 42355]) ("sh-dbg-flags" variable (:user-visible-flag t :default-value "-fvx") nil [42357 42524]) ("sh-compilation-error-regexp-alist" variable nil nil [42526 42784]) ("defgroup" code nil nil [42825 42918]) ("csh-command" variable (:default-value "csh") nil [42920 43018]) ("csh-dbg-flags" variable (:user-visible-flag t :default-value "-fVX") nil [43020 43185]) ("csh-compilation-error-regexp-alist" variable nil nil [43187 43442]) ("defgroup" code nil nil [43483 43584]) ("zsh-command" variable (:default-value "zsh") nil [43586 43684]) ("zsh-dbg-flags" variable (:user-visible-flag t :default-value "-nCvx") nil [43686 43815]) ("zsh-compilation-error-regexp-alist" variable nil nil [43817 44072]) ("defgroup" code nil nil [44119 44202]) ("tcl-command" variable (:default-value "wish") nil [44204 44303]) ("tcl-dbg-flags" variable (:user-visible-flag t) nil [44305 44406]) ("tcl-compilation-error-regexp-alist" variable (:default-value (quote (("file \"\\([^ ]+\\)\" line \\([0-9]+\\)[)]" 1 2)))) nil [44408 44694]) ("defgroup" code nil nil [44743 44832]) ("python-command" variable (:default-value "python") nil [44834 44944]) ("python-dbg-flags" variable (:user-visible-flag t) nil [44946 45056]) ("python-compilation-error-regexp-alist" variable (:default-value (quote (("File \"\\([^ ]+\\)\", line \\([0-9]+\\).*" 1 2)))) nil [45058 45357]) ("defgroup" code nil nil [45399 45484]) ("perl-command" variable (:default-value "perl") nil [45486 45581]) ("perl-dbg-flags" variable (:user-visible-flag t :default-value "-w") nil [45583 45709]) ("perl-compilation-error-regexp-alist" variable (:default-value (quote (("in file \\([^ ]+\\) at line \\([0-9]+\\).*" 1 2) ("at \\([^ ]+\\) line \\([0-9]+\\)," 1 2) ("at \\([^ ]+\\) line \\([0-9]+\\)." 1 2)))) nil [45711 46351]) ("defgroup" code nil nil [46393 46478]) ("ruby-command" variable (:default-value "ruby") nil [46480 46577]) ("ruby-dbg-flags" variable (:default-value "-w") nil [46579 46697]) ("ruby-compilation-error-regexp-alist" variable (:default-value (quote (("test[a-zA-Z0-9_]*([A-Z][a-zA-Z0-9_]*) \\[\\(.*\\):\\([0-9]+\\)\\]:" 1 2) ("\\(.*?\\)\\([0-9A-Za-z_./:-]+\\.rb\\):\\([0-9]+\\)" 2 3)))) nil [46699 47061]) ("emacs-lisp-byte-compile-dir-interactive-p" variable (:user-visible-flag t :default-value t) nil [47120 47322]) ("define-obsolete-variable-alias" code nil nil [47323 47447]) ("emacs-lisp-sources-regexp" variable (:default-value (cond ((boundp (quote emacs-lisp-file-regexp)) emacs-lisp-file-regexp) (t "\\.el$"))) nil [47449 47669]) ("emacs-lisp-bytecomp-ext" variable (:default-value "c") nil [47671 47812]) ("mode-compile-version" variable (:constant-flag t :default-value "2.28") nil [47860 48066]) ("mode-compile-help-address" variable (:constant-flag t :default-value "heddy.Boubaker@cena.fr") nil [48068 48176]) ("or" code nil nil [48417 48676]) ("mc--comp-lst" variable nil nil [48740 48774]) ("mc--def-comp" variable nil nil [48815 48849]) ("mc--compfile-regexp" variable nil nil [48857 48891]) ("mc--comp-varenv" variable nil nil [48899 48933]) ("mc--comp-options" variable nil nil [48941 48975]) ("mc--cflags-varenv" variable nil nil [48983 49017]) ("mc--source-ext-lst" variable nil nil [49025 49059]) ("mc--head-ext-lst" variable nil nil [49067 49101]) ("mc--source-ext-regexp" variable nil nil [49109 49143]) ("mc--build-op-args" variable nil nil [49151 49185]) ("mc--outfile-ext" variable nil nil [49193 49227]) ("mc--efs-path-list" variable nil nil [49252 49288]) ("mc--remote-host" variable nil nil [49289 49325]) ("mc--remote-host-history" variable nil nil [49326 49362]) ("mc--remote-username" variable nil nil [49363 49399]) ("mc--remote-command" variable nil nil [49400 49436]) ("mc--remote-pathname" variable nil nil [49437 49473]) ("mc--other-frame" variable nil nil [49499 49527]) ("mc--ws" variable (:default-value (or (and (fboundp (quote console-type)) (console-type)) (and (fboundp (quote device-type)) (device-type)) window-system)) nil [49528 49699]) ("mc--compile-command" variable nil nil [49701 49733]) ("make-variable-buffer-local" code nil nil [49948 49997]) ("mc--kill-compile" variable nil nil [49999 50028]) ("make-variable-buffer-local" code nil nil [50091 50137]) ("mc--selected-makefile" variable nil nil [50139 50173]) ("mc--selected-makefile-history" variable nil nil [50174 50216]) ("make-variable-buffer-local" code nil nil [50430 50481]) ("mc--selected-makerule" variable nil nil [50483 50517]) ("mc--selected-makerule-history" variable nil nil [50518 50560]) ("make-variable-buffer-local" code nil nil [50753 50804]) ("mc--find-C-main-regexp" variable (:constant-flag t :default-value "^[ 	]*\\(int\\|void\\)?[ 	
]*main[ 	
]*(+") nil [50806 50892]) ("mc--makefile-rules-regexp" variable (:constant-flag t :default-value "^
*\\([^.$ 	#
][^$ 	#
:]*\\)[ 	]*:") nil [50948 51029]) ("mc--makefile-rules" variable nil nil [51158 51189]) ("make-variable-buffer-local" code nil nil [51235 51283]) ("mc--mkfl-buffer-tick" variable nil nil [51285 51318]) ("make-variable-buffer-local" code nil nil [51387 51437]) ("mc--shell-args" variable nil nil [51439 51466]) ("make-variable-buffer-local" code nil nil [51668 51712]) ("mc--lucid-emacs-p" variable (:constant-flag t :default-value (or (string-match "Lucid" emacs-version) (string-match "XEmacs" emacs-version))) nil [51770 51911]) ("if" code nil nil [51955 52047]) ("mc--compile" function (:arguments ("compile-command")) nil [52049 52620]) ("mc--msg" function (:arguments ("msg" "&rest" "args")) nil [52622 52896]) ("cond" code nil nil [52898 54065]) ("mc--funcall" function (:arguments ("command" "&rest" "params")) nil [54067 55703]) ("mc--byte-compile-buffer" function nil nil [55705 56794]) ("fset" code nil nil [56818 57167]) ("fset" code nil nil [57169 57490]) ("mc--read-string" function (:arguments ("prompt" "&optional" "initial-contents")) nil [57492 57788]) ("mc--eval" function (:arguments ("sym" "&optional" "arg")) nil [57790 57990]) ("mc--common-completion" function (:arguments ("alist")) nil [57992 58151]) ("mc--byte-recompile-files" function (:arguments ("files")) nil [58153 59052]) ("mc--which" function (:arguments ("file")) nil [59054 60101]) ("mc--find-compiler" function nil nil [60103 60625]) ("mc--find-to-compile-file" function (:arguments ("&optional" "fname")) nil [60627 62368]) ("mc--guess-compile-result-fname" function (:arguments ("infile")) nil [62370 63288]) ("mc--build-output-args" function (:arguments ("infile")) nil [63290 63813]) ("mc--set-remote-cmd" function (:arguments ("remote-host" "&optional" "username" "pathname")) nil [63815 66254]) ("mc--makefile-test-p" function (:arguments ("makefile")) nil [66474 66837]) ("if" code nil nil [66840 67097]) ("mc--get-makefile-rules" function (:arguments ("makefile")) nil [67099 68603]) ("mc--makerule-completion" function (:arguments ("alist" "outfile" "&optional" "pref")) nil [68605 69687]) ("mc--choose-makefile-rule" function (:arguments ("makefile" "&optional" "outfile")) nil [69689 71048]) ("mc--cleanup-makefile-list" function (:arguments ("makefile-list")) nil [71050 71661]) ("mc--makefile-to-use" function (:arguments ("&optional" "directory")) nil [71663 73325]) ("mc--set-command" function (:arguments ("&optional" "file")) nil [73327 75494]) ("mc--shell-compile" function (:arguments ("shell" "dbgflags" "&optional" "errors-regexp-alist")) nil [75496 77135]) ("mc--assq-get-fcomp" function (:arguments ("asq")) nil [77137 77355]) ("mc--assq-get-fkill" function (:arguments ("asq")) nil [77357 77591]) ("mc--lookin-for-shell" function nil nil [77593 78424]) ("mc--lookat-name" function nil nil [78426 79319]) ("cc-compile" function nil nil [79357 80475]) ("java-compile" function nil nil [80477 81641]) ("c++-compile" function nil nil [81643 82785]) ("ada-compile" function nil nil [82788 83914]) ("f77-compile" function nil nil [83917 85069]) ("elisp-compile" function nil nil [85072 85609]) ("makefile-compile" function (:arguments ("&optional" "makefile")) nil [85612 86268]) ("dired-compile" function nil nil [86271 87406]) ("sh-compile" function nil nil [87409 87882]) ("csh-compile" function nil nil [87885 88363]) ("zsh-compile" function nil nil [88366 88844]) ("perl-compile" function nil nil [88847 89315]) ("tcl-compile" function nil nil [89318 89798]) ("python-compile" function nil nil [89801 90307]) ("ruby-compile" function nil nil [90309 90799]) ("default-compile" function nil nil [90801 91278]) ("mc--makefile" variable nil nil [91280 91301]) ("guess-compile" function nil nil [91336 92914]) ("and" code nil nil [93016 93095]) ("mode-compile-submit-bug-report" function (:user-visible-flag t) nil [93112 94398]) ("mode-compile" function (:user-visible-flag t :arguments ("&optional" "remote-host")) nil [94417 98756]) ("mode-compile" package nil nil [98758 98781]) ("mode-compile-kill" function (:user-visible-flag t) nil [98800 101320]) ("mode-compile-kill" package nil nil [101322 101350]))
    :file "mode-compile.el"
    :pointmax 101477
    :unmatched-syntax 'nil
    )
   (semanticdb-table "el-rusticus.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("setq" code nil nil [79 148]) ("tool-bar-mode" code nil nil [168 186]) ("global-set-key" code nil nil [222 265]) ("setq" code nil nil [296 328]) ("set-variable" code nil nil [372 432]) ("fi:common-lisp" function (:prototype-flag t :user-visible-flag t) nil [433 479]) ("global-set-key" code nil nil [480 517]) ("global-set-key" code nil nil [518 559]) ("global-set-key" code nil nil [560 611]) ("psvn" include nil nil [620 635]) ("rusticusruby" include nil nil [645 668]) ("load-file" code nil nil [684 759]) ("semantic-load-enable-code-helpers" code nil nil [871 906]) ("setq" code nil nil [1000 1047]) ("add-to-list" code nil nil [1061 1126]) ("ecb" include nil nil [1127 1141]) ("ecb-autoloads" include nil nil [1142 1166]) ("setq" code nil nil [1167 1196]) ("recentf" include nil nil [1706 1724]) ("recentf-mode" code nil nil [1725 1741]) ("setq" code nil nil [1742 1774]) ("global-set-key" code nil nil [1775 1824]) ("global-set-key" code nil nil [1846 1878]) ("global-set-key" code nil nil [1879 1915]) ("global-set-key" code nil nil [1916 1945]) ("global-set-key" code nil nil [1961 2006]) ("setq" code nil nil [2007 2124]) ("setq" code nil nil [2125 2151]) ("setq" code nil nil [2152 2178]) ("setq-default" code nil nil [2179 2205]) ("setq" code nil nil [2240 2307]) ("setq" code nil nil [2308 2337]) ("setq" code nil nil [2338 2383]) ("javascript-mode" include nil nil [2404 2430]) ("smooth-scrolling" include nil nil [2452 2479]) ("setq" code nil nil [2493 2567]) ("add-to-list" code nil nil [2580 2640]) ("csharp-mode" function (:prototype-flag t :user-visible-flag t) nil [2641 2714]) ("setq" code nil nil [2715 2790]) ("el-rusticus" package nil nil [2792 2814]))
    :file "el-rusticus.el"
    :pointmax 2844
    :unmatched-syntax 'nil
    )
   (semanticdb-table "find-recursive.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [1032 1045]) ("find-recursive-exclude-files" variable (:default-value (quote (".*.class$" ".*~$" ".*.elc$"))) nil [1047 1259]) ("find-file-recursively" function (:arguments ("file-regexp" "directory")) nil [1261 2138]) ("find-recursive-directory-relative-files" function (:arguments ("directory" "relative-directory" "file-regexp")) nil [2140 2900]) ("find-recursive-filter-out" function (:arguments ("remove-list" "list")) nil [2902 3358]) ("find-recursive-running-xemacs" variable (:default-value (string-match "XEmacs\\|Lucid" emacs-version)) nil [3360 3444]) ("if" code nil nil [3446 4578]) ("global-set-key" code nil nil [4580 4642]) ("find-recursive" package nil nil [4644 4669]))
    :file "find-recursive.el"
    :pointmax 4670
    )
   (semanticdb-table "rusticusruby.el"
    :major-mode 'emacs-lisp-mode
    :tags 'nil
    :file "rusticusruby.el"
    )
   (semanticdb-table "smooth-scrolling.el"
    :major-mode 'emacs-lisp-mode
    :tags 'nil
    :file "smooth-scrolling.el"
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
